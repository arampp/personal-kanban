@page "/"
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using PersonalKanban.Models
@using MediatR;
@using Domain.Card;
@inject IBoardsProvider BoardsProvider
@inject IColumnsProvider ColumnsProvider
@inject ICardsProvider CardsProvider
@inject ILogger<Home> Logger
@inject ISender sender;

<PageTitle>Personal Kanban</PageTitle>

<MudDropContainer T="Card" Items="_cards" ItemsSelector="@((card,dropzone) => card.ColumnId.ToString() == dropzone)"
    ItemDropped="ItemMoved" Class="d-flex flex-row">
    <ChildContent>
        @foreach (var column in _columns)
        {
            <MudPaper Elevation="0" Width="250px" MinHeight="400px"
                Class="pa-2 ma-2 d-flex flex-column mud-background-gray rounded-lg">
                <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                    <MudListSubheader>@column.Title</MudListSubheader>
                    <MudDropZone T="Card" Identifier="@column.Id.ToString()"
                        Class="rounded mud-background-gray mud-height-full" AllowReorder="true">
                    </MudDropZone>

                </MudList>

                @if (column.NewTaskOpen)
                {
                    <MudPaper Elevation="25" Class="pa-2 rounded-lg">
                        <MudTextField @bind-Value="column.NewCardName" Placeholder="New Task" DisableUnderLine="true"
                            Margin="Margin.Dense" Class="mx-2 mt-n2" AutoFocus Immediate MaxLines="4" AutoGrow
                            OnKeyUp="@(async (e) => await CheckSubmitOrCancel(e, column))">
                        </MudTextField>
                        <MudButton OnClick="@(async () => await AddCard(column))" Size="Size.Small" Color="Color.Primary"
                            FullWidth="true" Disabled="@(!column.NewCardNameValid)">Add Card
                        </MudButton>
                    </MudPaper>
                }
                else
                {
                    <MudButton OnClick="@(() => column.NewTaskOpen = !column.NewTaskOpen)"
                        StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Card</MudButton>
                }
            </MudPaper>

        }
    </ChildContent>
    <ItemRenderer>
        <MudListItem>
            <PkCard Model="@context" />
        </MudListItem>
    </ItemRenderer>
</MudDropContainer>

@code {
    private Board? _board;
    private IEnumerable<ColumnViewModel> _columns = [];
    private IEnumerable<Card> _cards = [];

    protected override Task OnInitializedAsync()
    {
        _board = BoardsProvider.Boards.First();
        _columns = _board.Columns.Select(c => ColumnsProvider.GetById(c).IfNone(() => new Column
            {
                Id = Guid.Empty,
                Title =
            "Unknown"
            }))
        .Select(c => new ColumnViewModel(c)).ToList();
        _cards = _columns.SelectMany(column => column.CardIds.Select(cardId => CardsProvider.GetById(cardId)));

        return Task.CompletedTask;
    }

    private async Task ItemMoved(MudItemDropInfo<Card> dropItem)
    {
        if (dropItem.Item == null)
        {
            Logger.LogWarning("ItemMoved: Item is null");
            return;
        }
        var request = new MoveCard
            {
                Card = dropItem.Item.Id,
                SourceColumn = dropItem.Item.ColumnId,
                TargetColumn = Guid.Parse(dropItem.DropzoneIdentifier),
                Position = dropItem.IndexInZone
            };
        await sender.Send(request);
    }

    private async Task CheckSubmitOrCancel(KeyboardEventArgs e, ColumnViewModel column)
    {
        if (e.Key == "Enter" && column.NewCardNameValid)
        {
            await AddCard(column);
        }
        else if (e.Key == "Escape")
        {
            CancelAddCard(column);
        }
    }

    private async Task AddCard(ColumnViewModel column)
    {
        if (column.NewCardName == null)
        {
            throw new ArgumentNullException(nameof(column.NewCardName));
        }

        await CardsProvider.AddCard(column.NewCardName, column.Title, column.Id);
        column.NewCardName = null;
        column.NewTaskOpen = false;
    }

    private void CancelAddCard(ColumnViewModel column)
    {
        column.NewCardName = null;
        column.NewTaskOpen = false;
    }

    private class ColumnViewModel(Column column)
    {
        public Guid Id => column.Id;
        public string Title => column.Title;
        public IEnumerable<Guid> CardIds => column.Cards;
        public string? NewCardName { get; set; }
        public bool NewCardNameValid => !string.IsNullOrWhiteSpace(NewCardName);
        public bool NewTaskOpen { get; set; }
    }

}